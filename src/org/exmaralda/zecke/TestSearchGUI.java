/*
 * TestSearchGUI.java
 *
 * Created on 26. Oktober 2004, 16:25
 */

package org.exmaralda.zecke;


import org.exmaralda.partitureditor.partiture.PartitureTableWithActions;
import org.exmaralda.partitureditor.jexmaraldaswing.EditSpeakerTableDialog;
import org.exmaralda.partitureditor.jexmaraldaswing.EditMetaInformationDialog;
import org.exmaralda.partitureditor.jexmaralda.sax.SegmentedTranscriptionSaxReader;
import org.exmaralda.partitureditor.jexmaralda.convert.StylesheetFactory;
import org.exmaralda.partitureditor.jexmaralda.SegmentedTranscription;
import org.exmaralda.partitureditor.jexmaralda.Speakertable;
import org.exmaralda.partitureditor.jexmaralda.TierFormatTable;
import org.exmaralda.partitureditor.jexmaralda.MetaInformation;
import org.exmaralda.partitureditor.jexmaralda.JexmaraldaException;
import org.exmaralda.partitureditor.jexmaralda.BasicTranscription;
import javax.swing.*;
import java.io.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.partiture.*;
import org.exmaralda.partitureditor.jexmaraldaswing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Cursor;
import java.awt.*;
import java.awt.event.*;
import org.exmaralda.partitureditor.unicodeKeyboard.*;

import java.util.Timer;


/**
 *
 * @author  thomas
 */
public class TestSearchGUI  extends javax.swing.JFrame 
                            implements SearchListener, UnicodeKeyboardListener,
                                       java.awt.event.WindowListener /*, ActionListener*/ {

    SimpleTranscriptionSearch search;
    TranscriptionSearchResult result;
    File currentDir = null;
    DefaultListModel listModel = new DefaultListModel();
    //javax.swing.ProgressMonitor progressMonitor;
    PartitureTableWithActions partitur;
    TableSorter tableSorter;
    TranscriptionSearchResultTableModel meinTableModel;
    String lastLoadedPartitur = "";
    //ActionListener actionListener;
    private static final Cursor WAIT_CURSOR = Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR );
    private static final Cursor ORDINARY_CURSOR = Cursor.getPredefinedCursor( Cursor.DEFAULT_CURSOR );

    public final static int UPDATE_TIME = 100;
    
   
    int currentProgress = 0;
    String currentMessage = "";
//    Thread labelThread;
    boolean isSearching = false;
    javax.swing.Timer timer;
    UnicodeKeyboardDialog keyboard;
    
    /** Creates new form TestSearchGUI */
    public TestSearchGUI() {

        timer = new javax.swing.Timer(UPDATE_TIME, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!isSearching) return;
                jProgressBar1.setValue(currentProgress);
                jProgressBar1.setString(Integer.toString(currentProgress) + " %");
            }
        });
        
        timer.start();

        
        ZeckeStartupSplashScreen splashScreen = new ZeckeStartupSplashScreen(this);
        
        meinTableModel = new TranscriptionSearchResultTableModel(new TranscriptionSearchResult());
        tableSorter = new TableSorter(meinTableModel);

        initComponents();

            
        searchResultTable.setModel(tableSorter);
        tableSorter.setTableHeader(searchResultTable.getTableHeader());
        
        partitur = new PartitureTableWithActions(null);
        partitur.setLocked(true);
        partitur.scaleConstant = -1;
        partitur.setCellBorderWidth(0);
        partiturPanel.add(partitur);        
        jList1.setModel(listModel);
        partitur.mediaPanelDialog.show();        
        formatTable();
        
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int x = screenSize.width;
        int y = screenSize.height;
        this.setSize(x, Math.round(y*2/3));
        partitur.mediaPanelDialog.setLocation(Math.round(x/2), Math.round(y*2/3));
        partitur.mediaPanelDialog.addWindowListener(this);

        keyboard = new UnicodeKeyboardDialog(this, false, new String[0], "Arial Unicode MS");
        keyboard.show();
        keyboard.getKeyboardPanel().addListener(this);
        keyboard.addWindowListener(this);
        
        //partitur.praatPanel.show();
        partitur.praatPanel.setLocation(Math.round(x/3), Math.round(y*2/3));
        partitur.praatPanel.addWindowListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        parametersPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        searchExpressionTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        contexPlustButton = new javax.swing.JButton();
        contextMinusButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        showPartiturButton = new javax.swing.JButton();
        showSegmentChainButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        showMetaButton = new javax.swing.JButton();
        showSpeakerButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        saveResultButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        keyboardCheckBox = new javax.swing.JCheckBox();
        audioPanelCheckBox = new javax.swing.JCheckBox();
        praatPanelCheckBox = new javax.swing.JCheckBox();
        mainSplitPane = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        corpusListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        addTranscriptionButton = new javax.swing.JButton();
        removeTranscriptionButton = new javax.swing.JButton();
        openListButton = new javax.swing.JButton();
        closeListButton = new javax.swing.JButton();
        searchResultPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchResultTable = new javax.swing.JTable();
        partiturPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();

        setTitle("ZECKE (Ziemlich EinfaChes Konkordanztool f\u00fcr Exmaralda)");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        parametersPanel.setLayout(new javax.swing.BoxLayout(parametersPanel, javax.swing.BoxLayout.X_AXIS));

        parametersPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 204, 0), 3));
        jButton1.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        jButton1.setText("Search Expression:");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        parametersPanel.add(jButton1);

        searchExpressionTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        searchExpressionTextField.setPreferredSize(new java.awt.Dimension(11, 30));
        searchExpressionTextField.setMinimumSize(new java.awt.Dimension(11, 30));
        searchExpressionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchExpressionTextFieldActionPerformed(evt);
            }
        });

        parametersPanel.add(searchExpressionTextField);

        searchButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        searchButton.setText("Search");
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Search.gif")));
        searchButton.setBackground(new java.awt.Color(204, 0, 0));
        searchButton.setPreferredSize(new java.awt.Dimension(110, 30));
        searchButton.setMaximumSize(new java.awt.Dimension(110, 30));
        searchButton.setMinimumSize(new java.awt.Dimension(110, 30));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        parametersPanel.add(searchButton);

        getContentPane().add(parametersPanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.Y_AXIS));

        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 20));
        jSeparator2.setMaximumSize(new java.awt.Dimension(0, 20));
        buttonPanel.add(jSeparator2);

        contexPlustButton.setText("More context");
        contexPlustButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/MoreContext.gif")));
        contexPlustButton.setPreferredSize(new java.awt.Dimension(145, 33));
        contexPlustButton.setMaximumSize(new java.awt.Dimension(145, 33));
        contexPlustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contexPlustButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(contexPlustButton);

        contextMinusButton.setText("Less context");
        contextMinusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/LessContext.gif")));
        contextMinusButton.setPreferredSize(new java.awt.Dimension(145, 33));
        contextMinusButton.setMaximumSize(new java.awt.Dimension(145, 33));
        contextMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextMinusButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(contextMinusButton);

        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 20));
        jSeparator1.setMaximumSize(new java.awt.Dimension(0, 20));
        buttonPanel.add(jSeparator1);

        showPartiturButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        showPartiturButton.setText("Show partitur");
        showPartiturButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showPartiturButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showPartiturButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPartiturButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(showPartiturButton);

        showSegmentChainButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        showSegmentChainButton.setText("Segment Chain");
        showSegmentChainButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showSegmentChainButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showSegmentChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSegmentChainButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(showSegmentChainButton);

        jSeparator3.setPreferredSize(new java.awt.Dimension(0, 20));
        jSeparator3.setMaximumSize(new java.awt.Dimension(0, 20));
        buttonPanel.add(jSeparator3);

        showMetaButton.setText("Meta information");
        showMetaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/EditMetaInformation.gif")));
        showMetaButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showMetaButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showMetaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMetaButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(showMetaButton);

        showSpeakerButton.setText("Speakertable");
        showSpeakerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/EditSpeakerTable.gif")));
        showSpeakerButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showSpeakerButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showSpeakerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSpeakerButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(showSpeakerButton);

        jSeparator4.setPreferredSize(new java.awt.Dimension(0, 20));
        jSeparator4.setMaximumSize(new java.awt.Dimension(0, 20));
        buttonPanel.add(jSeparator4);

        saveResultButton.setText("Save result");
        saveResultButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/SaveAs.gif")));
        saveResultButton.setPreferredSize(new java.awt.Dimension(145, 33));
        saveResultButton.setMaximumSize(new java.awt.Dimension(145, 33));
        saveResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveResultButton);

        jSeparator5.setPreferredSize(new java.awt.Dimension(0, 40));
        jSeparator5.setMaximumSize(new java.awt.Dimension(0, 40));
        buttonPanel.add(jSeparator5);

        keyboardCheckBox.setFont(new java.awt.Font("MS Sans Serif", 0, 10));
        keyboardCheckBox.setSelected(true);
        keyboardCheckBox.setText("Keyboard");
        keyboardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyboardCheckBoxActionPerformed(evt);
            }
        });

        buttonPanel.add(keyboardCheckBox);

        audioPanelCheckBox.setFont(new java.awt.Font("MS Sans Serif", 0, 10));
        audioPanelCheckBox.setSelected(true);
        audioPanelCheckBox.setText("Audio/Video Panel");
        audioPanelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioPanelCheckBoxActionPerformed(evt);
            }
        });

        buttonPanel.add(audioPanelCheckBox);

        praatPanelCheckBox.setFont(new java.awt.Font("MS Sans Serif", 0, 10));
        praatPanelCheckBox.setText("Praat Panel");
        praatPanelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                praatPanelCheckBoxActionPerformed(evt);
            }
        });

        buttonPanel.add(praatPanelCheckBox);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.EAST);

        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplitPane.setDividerLocation(300);
        corpusListPanel.setLayout(new javax.swing.BoxLayout(corpusListPanel, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));
        jList1.setFont(new java.awt.Font("MS Sans Serif", 0, 10));
        jList1.setBorder(new javax.swing.border.TitledBorder("Corpus"));
        jScrollPane1.setViewportView(jList1);

        corpusListPanel.add(jScrollPane1);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setMinimumSize(new java.awt.Dimension(50, 92));
        addTranscriptionButton.setText("Add...");
        addTranscriptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Add.gif")));
        addTranscriptionButton.setPreferredSize(new java.awt.Dimension(120, 23));
        addTranscriptionButton.setMaximumSize(new java.awt.Dimension(120, 23));
        addTranscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTranscriptionButtonActionPerformed(evt);
            }
        });

        jPanel5.add(addTranscriptionButton);

        removeTranscriptionButton.setText("Remove");
        removeTranscriptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Remove.gif")));
        removeTranscriptionButton.setPreferredSize(new java.awt.Dimension(120, 23));
        removeTranscriptionButton.setMaximumSize(new java.awt.Dimension(120, 23));
        removeTranscriptionButton.setMinimumSize(new java.awt.Dimension(185, 23));
        removeTranscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTranscriptionButtonActionPerformed(evt);
            }
        });

        jPanel5.add(removeTranscriptionButton);

        openListButton.setText("Open list...");
        openListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Open.gif")));
        openListButton.setActionCommand("Open Transcription List");
        openListButton.setPreferredSize(new java.awt.Dimension(120, 23));
        openListButton.setBorderPainted(false);
        openListButton.setMaximumSize(new java.awt.Dimension(120, 23));
        openListButton.setMinimumSize(new java.awt.Dimension(185, 23));
        openListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openListButtonActionPerformed(evt);
            }
        });

        jPanel5.add(openListButton);

        closeListButton.setText("Save list...");
        closeListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Save.gif")));
        closeListButton.setPreferredSize(new java.awt.Dimension(120, 23));
        closeListButton.setMaximumSize(new java.awt.Dimension(120, 23));
        closeListButton.setMinimumSize(new java.awt.Dimension(185, 23));
        closeListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeListButtonActionPerformed(evt);
            }
        });

        jPanel5.add(closeListButton);

        corpusListPanel.add(jPanel5);

        jSplitPane1.setLeftComponent(corpusListPanel);

        searchResultPanel.setLayout(new javax.swing.BoxLayout(searchResultPanel, javax.swing.BoxLayout.X_AXIS));

        searchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        searchResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        searchResultTable.setPreferredSize(null);
        searchResultTable.setMaximumSize(null);
        searchResultTable.setMinimumSize(null);
        searchResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultTableMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(searchResultTable);

        searchResultPanel.add(jScrollPane2);

        jSplitPane1.setRightComponent(searchResultPanel);

        mainSplitPane.setLeftComponent(jSplitPane1);

        partiturPanel.setLayout(new javax.swing.BoxLayout(partiturPanel, javax.swing.BoxLayout.X_AXIS));

        partiturPanel.setBorder(new javax.swing.border.TitledBorder("Partitur"));
        partiturPanel.setPreferredSize(new java.awt.Dimension(400, 300));
        partiturPanel.setMaximumSize(new java.awt.Dimension(800, 1000));
        mainSplitPane.setRightComponent(partiturPanel);

        getContentPane().add(mainSplitPane, java.awt.BorderLayout.CENTER);

        jProgressBar1.setForeground(new java.awt.Color(0, 204, 0));
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setPreferredSize(new java.awt.Dimension(150, 18));
        jProgressBar1.setMaximumSize(new java.awt.Dimension(150, 18));
        statusPanel.add(jProgressBar1);

        statusLabel.setPreferredSize(new java.awt.Dimension(200, 18));
        statusLabel.setMaximumSize(new java.awt.Dimension(300, 18));
        statusPanel.add(statusLabel);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void praatPanelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_praatPanelCheckBoxActionPerformed
        // TODO add your handling code here:
        if (praatPanelCheckBox.isSelected()){
            partitur.praatPanel.show();
        } else {
            partitur.praatPanel.hide();
        }
        
    }//GEN-LAST:event_praatPanelCheckBoxActionPerformed

    private void audioPanelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioPanelCheckBoxActionPerformed
        // TODO add your handling code here:
        if (audioPanelCheckBox.isSelected()){
            partitur.mediaPanelDialog.show();
        } else {
            partitur.mediaPanelDialog.hide();
        }

    }//GEN-LAST:event_audioPanelCheckBoxActionPerformed

    private void keyboardCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyboardCheckBoxActionPerformed
        // TODO add your handling code here:
        if (keyboardCheckBox.isSelected()){
            keyboard.show();
        } else {
            keyboard.hide();
        }
    }//GEN-LAST:event_keyboardCheckBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        SearchExpressionInputDialog dialog = new SearchExpressionInputDialog(this, true);
        dialog.show();
        String searchExpression = dialog.getSearchExpression();
        searchExpressionTextField.setText(searchExpression);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultButtonActionPerformed
        // TODO add your handling code here:
        SaveSearchResultDialog dialog = new SaveSearchResultDialog(this, result);        
        dialog.saveSearchResult();
    }//GEN-LAST:event_saveResultButtonActionPerformed

    private void searchResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultTableMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isLeftMouseButton(evt) && evt.getClickCount()==2){
            this.showPartiturButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchResultTableMouseClicked

    private void showSegmentChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSegmentChainButtonActionPerformed
        // TODO add your handling code here:
        int sel = searchResultTable.getSelectedRow();
        if (sel<0) return;
        int no = Integer.parseInt((String)(searchResultTable.getValueAt(sel,0)));
        TranscriptionSearchResultItem tsri = (TranscriptionSearchResultItem)(result.elementAt(no)); 
        String text = tsri.segment.getDescription();
        StringBuffer sb = new StringBuffer();
        sb.append("<html>");
        sb.append(checkHTML(text.substring(0,tsri.matchStart)));
        sb.append("<b>");
        sb.append(checkHTML(text.substring(tsri.matchStart, tsri.matchStart + tsri.matchLength)));
        sb.append("</b>");
        sb.append(checkHTML(text.substring(tsri.matchStart + tsri.matchLength)));
        sb.append("</html>");
        TextDialog d = new TextDialog(this, true, sb.toString());
        d.show();
        
    }//GEN-LAST:event_showSegmentChainButtonActionPerformed

    private void showSpeakerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSpeakerButtonActionPerformed
        // TODO add your handling code here:
        int sel = searchResultTable.getSelectedRow();
        if (sel<0) return;
        int no = Integer.parseInt((String)(searchResultTable.getValueAt(sel,0)));
        TranscriptionSearchResultItem tsri = (TranscriptionSearchResultItem)(result.elementAt(no)); 
        String filename = tsri.transcriptionPath;
        SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscription st = str.readFromFile(filename);
            Speakertable spt = st.getHead().getSpeakertable();
            EditSpeakerTableDialog d = new EditSpeakerTableDialog(this,true,spt);
            d.editSpeakertable();
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);        
    }//GEN-LAST:event_showSpeakerButtonActionPerformed

    private void showMetaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMetaButtonActionPerformed
        // TODO add your handling code here:
        int sel = searchResultTable.getSelectedRow();
        if (sel<0) return;
        int no = Integer.parseInt((String)(searchResultTable.getValueAt(sel,0)));
        TranscriptionSearchResultItem tsri = (TranscriptionSearchResultItem)(result.elementAt(no)); 
        String filename = tsri.transcriptionPath;
        SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscription st = str.readFromFile(filename);
            MetaInformation mi = st.getHead().getMetaInformation();
            EditMetaInformationDialog d = new EditMetaInformationDialog(this,true,mi);
            d.editMetaInformation();            
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);
        
    }//GEN-LAST:event_showMetaButtonActionPerformed

    private void contextMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextMinusButtonActionPerformed
        // TODO add your handling code here:
        meinTableModel.setContextSize(Math.max(1,meinTableModel.getContextSize()-5));
    }//GEN-LAST:event_contextMinusButtonActionPerformed

    private void contexPlustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contexPlustButtonActionPerformed
        // TODO add your handling code here:
        meinTableModel.setContextSize(meinTableModel.getContextSize()+5);        
    }//GEN-LAST:event_contexPlustButtonActionPerformed

    private void showPartiturButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPartiturButtonActionPerformed
        // TODO add your handling code here:
        int sel = searchResultTable.getSelectedRow();
        if (sel<0) return;
        int no = Integer.parseInt((String)(searchResultTable.getValueAt(sel,0)));
        TranscriptionSearchResultItem tsri = (TranscriptionSearchResultItem)(result.elementAt(no)); 
        String filename = tsri.transcriptionPath;
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
            SegmentedTranscription st = str.readFromFile(filename);
            if (!lastLoadedPartitur.equals(filename)){
                BasicTranscription bt = st.toBasicTranscription();
                StylesheetFactory sf = new StylesheetFactory();
                String formatString = 
                    sf.applyInternalStylesheetToString("/Squirrel/HIAT_FormatTable4BasicTranscription_Squirrel.xsl", bt.toXML());
                TierFormatTable tft = new TierFormatTable();
                tft.TierFormatTableFromString(formatString);
                partitur.getModel().setTranscriptionAndTierFormatTable(bt, tft);
                partitur.setupMedia();
                partitur.setupPraatPanel();
            }
            String timeID = tsri.segment.getTLIByCharacterOffset(tsri.matchStart);
            String tierID = tsri.tierID;
            String timeID2 = st.getBody().getCommonTimelineMatch(timeID);
            partitur.makeVisible(tierID, timeID2);
            lastLoadedPartitur = filename;
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);
       
    }//GEN-LAST:event_showPartiturButtonActionPerformed

    private void openListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openListButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int value = fileChooser.showOpenDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            try{
                listModel.clear();
                String filename = fileChooser.getSelectedFile().getAbsolutePath();
                FileInputStream fis = new FileInputStream(filename);
                InputStreamReader isr = new InputStreamReader(fis);
                BufferedReader br = new BufferedReader(isr);
                String nextLine = new String();
                while ((nextLine = br.readLine()) != null){                    
                    try{
                        String path = new java.io.File(new java.net.URI(nextLine)).getAbsolutePath();
                        listModel.addElement(path);
                    } catch (java.net.URISyntaxException use){
                        // do nothing
                    }
                }
                br.close();           
                updateCorpus();
            } catch (IOException ioe){
                JOptionPane.showMessageDialog(this, "IOException: " + ioe.getMessage());                
            }
        }
    }//GEN-LAST:event_openListButtonActionPerformed

    private void closeListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeListButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int value = fileChooser.showSaveDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            try{
                FileOutputStream fos = new FileOutputStream(fileChooser.getSelectedFile());
                for (int pos=0; pos<listModel.size(); pos++){
                    String file = new java.io.File((String)(listModel.elementAt(pos))).toURI().toString() + "\n";
                    //String file = (String)(listModel.elementAt(pos)) + "\n";
                    fos.write(file.getBytes());
                }
                fos.close();
            } catch (IOException ioe){
                JOptionPane.showMessageDialog(this, "IOException: " + ioe.getMessage());
            }
        }
    }//GEN-LAST:event_closeListButtonActionPerformed

    private void removeTranscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTranscriptionButtonActionPerformed
        // TODO add your handling code here:
        if (jList1.getSelectedIndex()>=0){
            listModel.removeElementAt(jList1.getSelectedIndex());
            updateCorpus();
        }
    }//GEN-LAST:event_removeTranscriptionButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        isSearching = true;
        setCursor( WAIT_CURSOR );
        Thread thread = new Thread(){
            public void run(){
                search();
                setCursor(ORDINARY_CURSOR); 
                jProgressBar1.setValue(100);
                jProgressBar1.setString("100 %");
                isSearching = false;            
            }
        };
        thread.start();

    }//GEN-LAST:event_searchButtonActionPerformed

    private void addTranscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTranscriptionButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(currentDir);
        int value = fileChooser.showOpenDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            currentDir = fileChooser.getSelectedFile();
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            listModel.addElement(path);
            updateCorpus();
        }
    }//GEN-LAST:event_addTranscriptionButtonActionPerformed

    private void searchExpressionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchExpressionTextFieldActionPerformed
        // TODO add your handling code here:
        this.searchButtonActionPerformed(null);
    }//GEN-LAST:event_searchExpressionTextFieldActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
            System.out.println("Setting system L&F : " + javax.swing.UIManager.getSystemLookAndFeelClassName());
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }           
        catch (Exception e) {
                e.printStackTrace();        
        }
        new TestSearchGUI().show();
        /*javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new TestSearchGUI().show();                
            }
        });*/
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTranscriptionButton;
    private javax.swing.JCheckBox audioPanelCheckBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeListButton;
    private javax.swing.JButton contexPlustButton;
    private javax.swing.JButton contextMinusButton;
    private javax.swing.JPanel corpusListPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JCheckBox keyboardCheckBox;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JButton openListButton;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JPanel partiturPanel;
    private javax.swing.JCheckBox praatPanelCheckBox;
    private javax.swing.JButton removeTranscriptionButton;
    private javax.swing.JButton saveResultButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchExpressionTextField;
    private javax.swing.JPanel searchResultPanel;
    private javax.swing.JTable searchResultTable;
    private javax.swing.JButton showMetaButton;
    private javax.swing.JButton showPartiturButton;
    private javax.swing.JButton showSegmentChainButton;
    private javax.swing.JButton showSpeakerButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    
    void search(){
        statusLabel.setText("Searching...");
        currentProgress = 0;
        try {
            String searchExpression = searchExpressionTextField.getText();
            result = (TranscriptionSearchResult)(search.search(AbstractSearch.REGULAR_EXPRESSION_SEARCH_TYPE, searchExpression));

            meinTableModel = new TranscriptionSearchResultTableModel(result);
            tableSorter = new TableSorter(meinTableModel);
            searchResultTable.setModel(tableSorter);
            tableSorter.setTableHeader(searchResultTable.getTableHeader());
                      
            //searchResultTable.setModel(new TranscriptionSearchResultTableModel(result));
            formatTable();            

            String message =  Double.toString(search.getTimeForLastSearch()) + " seconds / ";
            message+= result.size() + " results. ";
            statusLabel.setText(message);
            //JOptionPane.showMessageDialog(this, message);
        } catch (JexmaraldaException je){
            String text = "Fehler beim Einlesen des Corpus: " + je.getMessage();
            JOptionPane.showMessageDialog(this, text);
            statusLabel.setText("Search failed.");            
            return;
        } catch (IOException ioe){
            String text = "Fehler beim Schreiben der Ergebnisse: " + ioe.getMessage();
            JOptionPane.showMessageDialog(this, text);
            statusLabel.setText("Search failed.");            
            return;            
        } catch (Exception e){
            String text = "Fehler beim Auswerten der Suche: " + e.getMessage();
            JOptionPane.showMessageDialog(this, text);
            statusLabel.setText("Search failed.");            
            return;
        }
    }
    
    public void updateCorpus(){
        statusLabel.setText("Updating corpus...");
        setCursor( WAIT_CURSOR );
        String[] corpusFiles = new String[listModel.size()];
        for (int pos=0; pos<listModel.size(); pos++){
            String corpusFile = (String)(listModel.elementAt(pos));
            corpusFiles[pos] = corpusFile;
        }
        try{
            CorpusTree ct = new CorpusTree("Corpus", corpusFiles);
            search = new SimpleTranscriptionSearch(ct);
            search.addSearchListener(this);        
            statusLabel.setText("Corpus updated.");
        } catch (JexmaraldaException je){
            JOptionPane.showMessageDialog(this, je.getMessage());
            statusLabel.setText("Error updating corpus!");
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());            
            statusLabel.setText("Error updating corpus!");
        }
        setCursor( ORDINARY_CURSOR );
    }
    
    public void searchProgressChanged(int total, int done, String message) {
        currentProgress = (int)Math.round(100*done/total);
        System.out.println("progress " + currentProgress);
    }
    
    
    private void formatTable(){
        javax.swing.table.DefaultTableCellRenderer dtcr3 = new javax.swing.table.DefaultTableCellRenderer();
        dtcr3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        
        searchResultTable.getColumnModel().getColumn(3).setCellRenderer(dtcr3);        
        
        javax.swing.table.DefaultTableCellRenderer dtcr4 = new javax.swing.table.DefaultTableCellRenderer();
        dtcr4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dtcr4.setForeground(java.awt.Color.RED);             
        
     
        searchResultTable.getColumnModel().getColumn(4).setCellRenderer(dtcr4);        
        
        searchResultTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        searchResultTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        searchResultTable.getColumnModel().getColumn(2).setPreferredWidth(70);
        searchResultTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        searchResultTable.getColumnModel().getColumn(4).setPreferredWidth(70);
        searchResultTable.getColumnModel().getColumn(5).setPreferredWidth(250);        
        
    }

    /*public void actionPerformed(ActionEvent evt) {
        progressMonitor.setProgress(currentProgress);
        System.out.println("UPDATE!!!");
    }*/
    
    public java.awt.Image getIconImage(){
        return new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Zecke.gif")).getImage();        
    }
    
    static String checkHTML(String checkString){
        String result = new String();
        for (int pos=0; pos<checkString.length(); pos++){
            char symbol = checkString.charAt(pos);
            if (symbol=='<'){result+="&lt;";}
            else if (symbol=='>'){result+="&gt;";}
            else if (symbol=='&'){result+="&amp;";}
            else if (symbol=='"'){result+="&quot;";}
            else {result+=symbol;}
        }
        return result;
    }

    public void performUnicodeKeyboardAction(UnicodeKeyboardEvent event) {
        searchExpressionTextField.replaceSelection(event.getText());
        searchExpressionTextField.getTopLevelAncestor().requestFocus();
        searchExpressionTextField.requestFocus(); 
    }
    
    public void windowActivated(WindowEvent e) {
    }
    
    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
        Object source = windowEvent.getSource();
        if (source==keyboard){
            keyboardCheckBox.setSelected(false);
        } else if (source==partitur.mediaPanelDialog){
            audioPanelCheckBox.setSelected(false);
        } else if (source==partitur.praatPanel){
            praatPanelCheckBox.setSelected(false);
        } else { // i.e. source is this
        }
    }
    
    public void windowClosing(WindowEvent e) {
    }
    
    public void windowDeactivated(WindowEvent e) {
    }
    
    public void windowDeiconified(WindowEvent e) {
    }
    
    public void windowIconified(WindowEvent e) {
    }
    
    public void windowOpened(WindowEvent e) {
    }

    public void searchMessageChanged(String message) {
    }
    
}


     
    
