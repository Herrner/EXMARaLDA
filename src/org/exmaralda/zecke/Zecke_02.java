/*
 * TestSearchGUI.java
 *
 * Created on 26. Oktober 2004, 16:25
 */

package org.exmaralda.zecke;


import org.exmaralda.partitureditor.partiture.PartitureTableWithActions;
import org.exmaralda.partitureditor.jexmaralda.sax.SegmentedTranscriptionSaxReader;
import org.exmaralda.partitureditor.jexmaralda.convert.StylesheetFactory;
import org.exmaralda.partitureditor.jexmaralda.SegmentedTranscription;
import org.exmaralda.partitureditor.jexmaralda.TierFormatTable;
import org.exmaralda.partitureditor.jexmaralda.JexmaraldaException;
import org.exmaralda.partitureditor.jexmaralda.BasicTranscription;
import javax.swing.*;
import java.io.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.partiture.*;
import org.exmaralda.partitureditor.jexmaraldaswing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Cursor;
import java.awt.*;
import java.awt.event.*;
import org.exmaralda.partitureditor.unicodeKeyboard.*;
import java.util.*;
import org.xml.sax.SAXException;

import java.util.Timer;


/**
 *
 * @author  thomas
 */
public class Zecke_02 extends javax.swing.JFrame 
                      implements java.awt.event.WindowListener, 
                                 SearchListener,
                                 ShowPartiturListener, 
                                 org.exmaralda.partitureditor.unicodeKeyboard.UnicodeKeyboardListener,
                                 javax.swing.event.ListDataListener {

    public final static int UPDATE_TIME = 100;

    javax.swing.Timer timer;
    String currentMessage = "";
    int currentProgress = 0;
    
    File currentDir = null;
    CorpusListModel listModel = new CorpusListModel();
    PartitureTableWithActions partitur;
    String lastLoadedPartitur = "";
    private static final Cursor WAIT_CURSOR = Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR );
    private static final Cursor ORDINARY_CURSOR = Cursor.getPredefinedCursor( Cursor.DEFAULT_CURSOR );

    public String PATH_TO_STYLESHEET = "/org/exmaralda/zecke/HIAT_FormatTable4BasicTranscription_Squirrel.xsl";
      
    boolean isUpdating = false;
    UnicodeKeyboardDialog keyboard;
    
    String pathToPartiturStylesheet = "";
    
    /** Creates new form TestSearchGUI */
    public Zecke_02() {

      
        timer = new javax.swing.Timer(UPDATE_TIME, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                //statusLabel.setText(currentMessage);
                if (!isUpdating) return;
                progressBar.setValue(currentProgress);
                progressBar.setString(Integer.toString(currentProgress) + " %");
            }
        });
        
        timer.start();

        ZeckeStartupSplashScreen splashScreen = new ZeckeStartupSplashScreen(this);
        
        initComponents();                        

        partitur = new PartitureTableWithActions(null);
        partitur.setLocked(true);
        partitur.scaleConstant = -1;
        partitur.setCellBorderWidth(0);
        partiturPanel.add(partitur);        
        
        listModel.addListDataListener(this);
        jList1.setModel(listModel);
        jList1.setCellRenderer(new CorpusElementListCellRenderer());
        
        partitur.mediaPanelDialog.show();        
        
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int x = screenSize.width;
        int y = screenSize.height;
        this.setSize(x, Math.round(y*2/3));
        partitur.mediaPanelDialog.setLocation(Math.round(x/2), Math.round(y*2/3));        
        partitur.mediaPanelDialog.addWindowListener(this);

        keyboard = new UnicodeKeyboardDialog(this, false, new String[0], "Arial Unicode MS");
        keyboard.show();
        keyboard.addWindowListener(this);
        keyboard.getKeyboardPanel().addListener(this);
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainSplitPane = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        corpusListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        statusMessagePanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        bufferPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        openListButton = new javax.swing.JButton();
        saveListButton = new javax.swing.JButton();
        addTranscriptionButton = new javax.swing.JButton();
        removeTranscriptionButton = new javax.swing.JButton();
        searchDesktopPane = new javax.swing.JDesktopPane();
        partiturPanel = new javax.swing.JPanel();
        newButtonsPanel = new javax.swing.JPanel();
        newTranscriptionSearchButton = new javax.swing.JButton();
        newDescriptionSearchButton = new javax.swing.JButton();
        newAnnotationSearchButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        checkBoxPanel = new javax.swing.JPanel();
        showCorpusPanelCheckBox = new javax.swing.JCheckBox();
        keyboardCheckBox = new javax.swing.JCheckBox();
        audioPanelCheckBox = new javax.swing.JCheckBox();
        chossePartiturStylesheetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ZECKE");
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mainSplitPane.setDividerLocation(300);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        corpusListPanel.setLayout(new javax.swing.BoxLayout(corpusListPanel, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));
        jList1.setBorder(new javax.swing.border.TitledBorder("Corpus"));
        jList1.setFont(new java.awt.Font("MS Sans Serif", 0, 10));
        jScrollPane1.setViewportView(jList1);

        corpusListPanel.add(jScrollPane1);

        statusMessagePanel.setLayout(new javax.swing.BoxLayout(statusMessagePanel, javax.swing.BoxLayout.Y_AXIS));

        statusMessagePanel.setMaximumSize(new java.awt.Dimension(400, 40));
        progressBar.setAlignmentX(0.0F);
        progressBar.setMaximumSize(new java.awt.Dimension(120, 18));
        progressBar.setPreferredSize(new java.awt.Dimension(120, 18));
        progressBar.setStringPainted(true);
        statusMessagePanel.add(progressBar);

        bufferPanel.setLayout(new javax.swing.BoxLayout(bufferPanel, javax.swing.BoxLayout.Y_AXIS));

        bufferPanel.setAlignmentX(0.0F);
        bufferPanel.setMaximumSize(new java.awt.Dimension(10, 10));
        statusMessagePanel.add(bufferPanel);

        corpusListPanel.add(statusMessagePanel);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setMinimumSize(new java.awt.Dimension(50, 92));
        openListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Open.gif")));
        openListButton.setMnemonic(java.awt.event.KeyEvent.VK_O);
        openListButton.setText("Open...");
        openListButton.setActionCommand("Open Transcription List");
        openListButton.setBorderPainted(false);
        openListButton.setMaximumSize(new java.awt.Dimension(120, 23));
        openListButton.setMinimumSize(new java.awt.Dimension(185, 23));
        openListButton.setPreferredSize(new java.awt.Dimension(120, 23));
        openListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openListButtonActionPerformed(evt);
            }
        });

        jPanel5.add(openListButton);

        saveListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Save.gif")));
        saveListButton.setMnemonic(java.awt.event.KeyEvent.VK_S);
        saveListButton.setText("Save...");
        saveListButton.setMaximumSize(new java.awt.Dimension(120, 23));
        saveListButton.setMinimumSize(new java.awt.Dimension(185, 23));
        saveListButton.setPreferredSize(new java.awt.Dimension(120, 23));
        saveListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveListButtonActionPerformed(evt);
            }
        });

        jPanel5.add(saveListButton);

        addTranscriptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Add.gif")));
        addTranscriptionButton.setText("Add...");
        addTranscriptionButton.setMaximumSize(new java.awt.Dimension(120, 23));
        addTranscriptionButton.setPreferredSize(new java.awt.Dimension(120, 23));
        addTranscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTranscriptionButtonActionPerformed(evt);
            }
        });

        jPanel5.add(addTranscriptionButton);

        removeTranscriptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Remove.gif")));
        removeTranscriptionButton.setText("Remove");
        removeTranscriptionButton.setMaximumSize(new java.awt.Dimension(120, 23));
        removeTranscriptionButton.setMinimumSize(new java.awt.Dimension(185, 23));
        removeTranscriptionButton.setPreferredSize(new java.awt.Dimension(120, 23));
        removeTranscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTranscriptionButtonActionPerformed(evt);
            }
        });

        jPanel5.add(removeTranscriptionButton);

        corpusListPanel.add(jPanel5);

        jSplitPane1.setLeftComponent(corpusListPanel);

        jSplitPane1.setRightComponent(searchDesktopPane);

        mainSplitPane.setLeftComponent(jSplitPane1);

        partiturPanel.setLayout(new javax.swing.BoxLayout(partiturPanel, javax.swing.BoxLayout.X_AXIS));

        partiturPanel.setBorder(new javax.swing.border.TitledBorder("Partitur"));
        partiturPanel.setPreferredSize(new java.awt.Dimension(400, 300));
        partiturPanel.setMaximumSize(new java.awt.Dimension(800, 1000));
        mainSplitPane.setRightComponent(partiturPanel);

        getContentPane().add(mainSplitPane, java.awt.BorderLayout.CENTER);

        newTranscriptionSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/transcription.png")));
        newTranscriptionSearchButton.setMnemonic(java.awt.event.KeyEvent.VK_T);
        newTranscriptionSearchButton.setText("New Transcription Search");
        newTranscriptionSearchButton.setEnabled(false);
        newTranscriptionSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTranscriptionSearchButtonActionPerformed(evt);
            }
        });

        newButtonsPanel.add(newTranscriptionSearchButton);

        newDescriptionSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/description.png")));
        newDescriptionSearchButton.setMnemonic(java.awt.event.KeyEvent.VK_D);
        newDescriptionSearchButton.setText("New Description Search");
        newDescriptionSearchButton.setEnabled(false);
        newDescriptionSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDescriptionSearchButtonActionPerformed(evt);
            }
        });

        newButtonsPanel.add(newDescriptionSearchButton);

        newAnnotationSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/annotation.png")));
        newAnnotationSearchButton.setMnemonic(java.awt.event.KeyEvent.VK_A);
        newAnnotationSearchButton.setText("New Annotation Search");
        newAnnotationSearchButton.setEnabled(false);
        newAnnotationSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnnotationSearchButtonActionPerformed(evt);
            }
        });

        newButtonsPanel.add(newAnnotationSearchButton);

        getContentPane().add(newButtonsPanel, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        showCorpusPanelCheckBox.setSelected(true);
        showCorpusPanelCheckBox.setText("Show Corpus Panel");
        showCorpusPanelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCorpusPanelCheckBoxActionPerformed(evt);
            }
        });

        checkBoxPanel.add(showCorpusPanelCheckBox);

        keyboardCheckBox.setSelected(true);
        keyboardCheckBox.setText("Show Keyboard");
        keyboardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyboardCheckBoxActionPerformed(evt);
            }
        });

        checkBoxPanel.add(keyboardCheckBox);

        audioPanelCheckBox.setSelected(true);
        audioPanelCheckBox.setText("Show Audio/Video Panel");
        audioPanelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioPanelCheckBoxActionPerformed(evt);
            }
        });

        checkBoxPanel.add(audioPanelCheckBox);

        chossePartiturStylesheetButton.setText("Partitur Stylesheet...");
        chossePartiturStylesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chossePartiturStylesheetButtonActionPerformed(evt);
            }
        });

        checkBoxPanel.add(chossePartiturStylesheetButton);

        jPanel1.add(checkBoxPanel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void chossePartiturStylesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chossePartiturStylesheetButtonActionPerformed
        org.exmaralda.partitureditor.jexmaraldaswing.fileDialogs.ChooseStylesheetDialog dialog =
                new org.exmaralda.partitureditor.jexmaraldaswing.fileDialogs.ChooseStylesheetDialog(pathToPartiturStylesheet);
        int value = dialog.showOpenDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            pathToPartiturStylesheet = dialog.getSelectedFile().getAbsolutePath();
        }
    }//GEN-LAST:event_chossePartiturStylesheetButtonActionPerformed

    private void newAnnotationSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnnotationSearchButtonActionPerformed
        AnnotationSearchInternalFrame dsif = new AnnotationSearchInternalFrame();
        dsif.setCorpus(getCorpusTree());
        dsif.addShowPartiturListener(this);
        keyboard.getKeyboardPanel().addListener(dsif);
        searchDesktopPane.add(dsif);
        dsif.show();        
    }//GEN-LAST:event_newAnnotationSearchButtonActionPerformed

    private void newDescriptionSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDescriptionSearchButtonActionPerformed
        DescriptionSearchInternalFrame dsif = new DescriptionSearchInternalFrame();
        dsif.setCorpus(getCorpusTree());
        dsif.addShowPartiturListener(this);
        keyboard.getKeyboardPanel().addListener(dsif);
        searchDesktopPane.add(dsif);
        dsif.show();        
    }//GEN-LAST:event_newDescriptionSearchButtonActionPerformed

    private void showCorpusPanelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCorpusPanelCheckBoxActionPerformed
// TODO add your handling code here:
        corpusListPanel.setVisible(showCorpusPanelCheckBox.isSelected());
        jSplitPane1.setDividerLocation(-1);
    }//GEN-LAST:event_showCorpusPanelCheckBoxActionPerformed

    private void audioPanelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioPanelCheckBoxActionPerformed
        if (audioPanelCheckBox.isSelected()){
            partitur.mediaPanelDialog.show();
        } else {
            partitur.mediaPanelDialog.hide();
        }
    }//GEN-LAST:event_audioPanelCheckBoxActionPerformed

    private void keyboardCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyboardCheckBoxActionPerformed
        if (keyboardCheckBox.isSelected()){
            keyboard.show();
        } else {
            keyboard.hide();
        }        
    }//GEN-LAST:event_keyboardCheckBoxActionPerformed

    private void newTranscriptionSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTranscriptionSearchButtonActionPerformed
// TODO add your handling code here:
        TranscriptionSearchInternalFrame tsif = new TranscriptionSearchInternalFrame();
        tsif.setCorpus(getCorpusTree());
        tsif.addShowPartiturListener(this);
        keyboard.getKeyboardPanel().addListener(tsif);
        searchDesktopPane.add(tsif);
        tsif.show();
    }//GEN-LAST:event_newTranscriptionSearchButtonActionPerformed

    private void openListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openListButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int value = fileChooser.showOpenDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            final String filename = fileChooser.getSelectedFile().getAbsolutePath();
            Thread thread = new Thread(){
                public void run() {
                    openCorpus(filename);
                    setCursor(ORDINARY_CURSOR); 
                    progressBar.setValue(100);
                    progressBar.setString("100 %");
                    isUpdating = false;
                }
            };
            thread.start();                
        }
    }//GEN-LAST:event_openListButtonActionPerformed

    private void saveListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveListButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int value = fileChooser.showSaveDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            try{
                listModel.getCorpusTree().writeToPlainTextFile(fileChooser.getSelectedFile().getAbsolutePath());
            } catch (IOException ioe){
                JOptionPane.showMessageDialog(this, "IOException: " + ioe.getMessage());
            }
        }
    }//GEN-LAST:event_saveListButtonActionPerformed

    private void removeTranscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTranscriptionButtonActionPerformed
        // TODO add your handling code here:
        if (jList1.getSelectedIndex()>=0){
            listModel.removeElementAt(jList1.getSelectedIndex());
        }
    }//GEN-LAST:event_removeTranscriptionButtonActionPerformed

    private void addTranscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTranscriptionButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(currentDir);
        int value = fileChooser.showOpenDialog(this);
        if (value==JFileChooser.APPROVE_OPTION){
            try{
                currentDir = fileChooser.getSelectedFile();
                String path = fileChooser.getSelectedFile().getAbsolutePath();
                SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
                SegmentedTranscription st = str.readFromFile(path);
                CorpusElement ce = new CorpusElement(true, st.getHead().getMetaInformation().getTranscriptionName(), path);
                listModel.addElement(ce);
            } catch (SAXException sae){
                String message = "Could not add transcription:" 
                                  + System.getProperty("line.separator")
                                  + sae.getLocalizedMessage();
                JOptionPane.showMessageDialog(this,message);
            }
        }
    }//GEN-LAST:event_addTranscriptionButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
            System.out.println("Setting system L&F : " + javax.swing.UIManager.getSystemLookAndFeelClassName());
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }           
        catch (Exception e) {
                e.printStackTrace();        
        }
        new Zecke_02().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTranscriptionButton;
    private javax.swing.JCheckBox audioPanelCheckBox;
    private javax.swing.JPanel bufferPanel;
    private javax.swing.JPanel checkBoxPanel;
    private javax.swing.JButton chossePartiturStylesheetButton;
    private javax.swing.JPanel corpusListPanel;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JCheckBox keyboardCheckBox;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JButton newAnnotationSearchButton;
    private javax.swing.JPanel newButtonsPanel;
    private javax.swing.JButton newDescriptionSearchButton;
    private javax.swing.JButton newTranscriptionSearchButton;
    private javax.swing.JButton openListButton;
    private javax.swing.JPanel partiturPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton removeTranscriptionButton;
    private javax.swing.JButton saveListButton;
    private javax.swing.JDesktopPane searchDesktopPane;
    private javax.swing.JCheckBox showCorpusPanelCheckBox;
    private javax.swing.JPanel statusMessagePanel;
    // End of variables declaration//GEN-END:variables
            
  
    public java.awt.Image getIconImage(){
        return new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/Zecke.gif")).getImage();        
    }
    

    
    public void windowActivated(WindowEvent e) {
    }
    
    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
        Object source = windowEvent.getSource();
        if (source==keyboard){
            keyboardCheckBox.setSelected(false);
        } else if (source==partitur.mediaPanelDialog){
            audioPanelCheckBox.setSelected(false);
        } else { // i.e. source is this
        }
    }
    
    public void windowClosing(WindowEvent e) {
    }
    
    public void windowDeactivated(WindowEvent e) {
    }
    
    public void windowDeiconified(WindowEvent e) {
    }
    
    public void windowIconified(WindowEvent e) {
    }
    
    public void windowOpened(WindowEvent e) {
    }

    public void showPartitur(ShowPartiturEvent event) {
        String filename = event.pathToSegmentedTranscription;
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
            SegmentedTranscription st = str.readFromFile(filename);
            if (!lastLoadedPartitur.equals(filename)){
                BasicTranscription bt = st.toBasicTranscription();
                StylesheetFactory sf = new StylesheetFactory();
                String formatString = "";
                if (pathToPartiturStylesheet.length()<=0){    
                    formatString = sf.applyInternalStylesheetToString(PATH_TO_STYLESHEET, bt.toXML());
                } else {
                    try{
                        formatString = sf.applyExternalStylesheetToString(pathToPartiturStylesheet, bt.toXML());
                    } catch (Exception e){
                        formatString = sf.applyInternalStylesheetToString(PATH_TO_STYLESHEET, bt.toXML());                        
                    }
                }
                TierFormatTable tft = new TierFormatTable();
                tft.TierFormatTableFromString(formatString);
                partitur.getModel().setTranscriptionAndTierFormatTable(bt, tft);
                partitur.setupMedia();
            }
            String timeID = event.tliID;
            String tierID = event.tierID;
            String timeID2 = st.getBody().getCommonTimelineMatch(timeID);
            partitur.makeVisible(tierID, timeID2);
            lastLoadedPartitur = filename;
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);        
    }

    public void performUnicodeKeyboardAction(UnicodeKeyboardEvent event) {
        if (searchDesktopPane.getSelectedFrame()==null) return;
        ((AbstractSearchInternalFrame)(searchDesktopPane.getSelectedFrame())).searchExpressionTextField.requestFocus();
    }

    public void contentsChanged(javax.swing.event.ListDataEvent listDataEvent) {
        checkCorpusList();
    }

    public void intervalAdded(javax.swing.event.ListDataEvent listDataEvent) {
        checkCorpusList();
    }

    public void intervalRemoved(javax.swing.event.ListDataEvent listDataEvent) {
        checkCorpusList();
    }
    
    private void checkCorpusList(){
        boolean listIsNotEmpty = (jList1.getModel().getSize()>0);
        newTranscriptionSearchButton.setEnabled(listIsNotEmpty);
        newDescriptionSearchButton.setEnabled(listIsNotEmpty);
        newAnnotationSearchButton.setEnabled(listIsNotEmpty);
    }
    
    CorpusTree getCorpusTree(){
        return ((CorpusListModel)(jList1.getModel())).getCorpusTree();
    }    
    
    public void searchProgressChanged(int total, int done, String message) {
        currentProgress = (int)Math.round(100*done/total);        
    }
    
    public void searchMessageChanged(String message) {
        currentMessage = message;
    }
    
    void openCorpus(String filename){
        try{
            Vector paths = new Vector();
            //String filename = fileChooser.getSelectedFile().getAbsolutePath();
            FileInputStream fis = new FileInputStream(filename);
            InputStreamReader isr = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(isr);
            String nextLine = new String();
            while ((nextLine = br.readLine()) != null){                    
                String path = new java.io.File(new java.net.URI(nextLine)).getAbsolutePath();
                paths.addElement(path);
            }
            br.close();           
            String[] pathsArray = new String[paths.size()];
            for (int pos=0; pos<paths.size(); pos++){
                pathsArray[pos] = (String)(paths.elementAt(pos));
            }
            CorpusTree ct = new CorpusTree("Corpus");
            ct.addSearchListener(this);
            isUpdating = true;
            ct.readFiles(pathsArray);
            listModel.setCorpusTree(ct);
        } catch (IllegalArgumentException iae){
            JOptionPane.showMessageDialog(this, "IllegalArgumentException: " + iae.getMessage());                
            progressBar.setString("Error.");
        } catch (IOException ioe){
            JOptionPane.showMessageDialog(this, "IOException: " + ioe.getMessage());                
            progressBar.setString("Error.");
        } catch (java.net.URISyntaxException use){
            JOptionPane.showMessageDialog(this, "URISyntaxException: " + use.getMessage());                
            progressBar.setString("Error.");
        } catch (JexmaraldaException je){                
            JOptionPane.showMessageDialog(this, "JexmaraldaException: " + je.getMessage());                
        } catch (SAXException sae){                
            JOptionPane.showMessageDialog(this, "SAXException: " + sae.getMessage());                             
            progressBar.setString("Error.");
        }        
    }

    
}


     
    
