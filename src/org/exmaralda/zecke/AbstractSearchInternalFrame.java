/*
 * AbstractSearchInternalFrame.java
 *
 * Created on 2. Juni 2005, 14:07
 */

package org.exmaralda.zecke;

import org.exmaralda.partitureditor.unicodeKeyboard.UnicodeKeyboardEvent;
import org.exmaralda.partitureditor.jexmaraldaswing.EditSpeakerTableDialog;
import org.exmaralda.partitureditor.jexmaraldaswing.EditMetaInformationDialog;
import org.exmaralda.partitureditor.jexmaralda.sax.SegmentedTranscriptionSaxReader;
import org.exmaralda.partitureditor.jexmaralda.SegmentedTranscription;
import org.exmaralda.partitureditor.jexmaralda.Speakertable;
import org.exmaralda.partitureditor.jexmaralda.MetaInformation;
import javax.swing.*;
import java.io.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.jexmaralda.*;
import org.exmaralda.partitureditor.partiture.*;
import org.exmaralda.partitureditor.jexmaraldaswing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Cursor;
import java.awt.*;
import java.awt.event.*;
import org.exmaralda.partitureditor.unicodeKeyboard.*;

import java.util.Timer;

/**
 *
 * @author  thomas
 */
public abstract class AbstractSearchInternalFrame extends javax.swing.JInternalFrame 
                                                  implements SearchListener,
                                                             org.exmaralda.partitureditor.unicodeKeyboard.UnicodeKeyboardListener,
                                                             javax.swing.event.DocumentListener {
    
     static final Cursor WAIT_CURSOR = Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR );
     static final Cursor ORDINARY_CURSOR = Cursor.getPredefinedCursor( Cursor.DEFAULT_CURSOR );

     public final static int UPDATE_TIME = 100;
     javax.swing.Timer timer;
     int currentProgress = 0;
     String currentMessage = "";
     boolean isSearching = false;
     
     String[] metaDataKeys;
     
    javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();

    /** Creates new form AbstractSearchInternalFrame */
    public AbstractSearchInternalFrame() {
        timer = new javax.swing.Timer(UPDATE_TIME, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!isSearching) return;
                progressBar.setValue(currentProgress);
                progressBar.setString(Integer.toString(currentProgress) + " %");
            }
        });
        
        timer.start();

        initComponents();
        
        searchExpressionTextField.getDocument().addDocumentListener(this);
        searchExpressionTextField.requestFocus();
    }
    
    public JTable getSearchResultTable(){
        return searchResultTable;
    }
    
    public String getSearchExpression(){
        return searchExpressionTextField.getText();
    }
    
    public void addShowPartiturListener(ShowPartiturListener l) {
         listenerList.add(ShowPartiturListener.class, l);
    }
    
    public abstract CorpusTree getCorpus();
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        searchParametersPanel = new javax.swing.JPanel();
        searchExpressionButton = new javax.swing.JButton();
        searchExpressionTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        additionalMetaDataButton = new javax.swing.JButton();
        contextualizePanel = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        contexPlustButton = new javax.swing.JButton();
        contextMinusButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        showPartiturButton = new javax.swing.JButton();
        showSegmentChainButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        showMetaButton = new javax.swing.JButton();
        showSpeakerButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        saveResultButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        resultPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchResultTable = new javax.swing.JTable();
        statusPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        try {
            setIcon(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        searchParametersPanel.setLayout(new javax.swing.BoxLayout(searchParametersPanel, javax.swing.BoxLayout.X_AXIS));

        searchExpressionButton.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        searchExpressionButton.setText("Search Expression:");
        searchExpressionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchExpressionButtonActionPerformed(evt);
            }
        });

        searchParametersPanel.add(searchExpressionButton);

        searchExpressionTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        searchExpressionTextField.setFocusCycleRoot(true);
        searchExpressionTextField.setMinimumSize(new java.awt.Dimension(11, 30));
        searchExpressionTextField.setPreferredSize(new java.awt.Dimension(11, 30));
        searchExpressionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchExpressionTextFieldActionPerformed(evt);
            }
        });

        searchParametersPanel.add(searchExpressionTextField);

        searchButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/Search.gif")));
        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.setMaximumSize(new java.awt.Dimension(110, 30));
        searchButton.setMinimumSize(new java.awt.Dimension(110, 30));
        searchButton.setPreferredSize(new java.awt.Dimension(110, 30));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchParametersPanel.add(searchButton);

        additionalMetaDataButton.setText("Meta data...");
        additionalMetaDataButton.setMaximumSize(new java.awt.Dimension(93, 30));
        additionalMetaDataButton.setMinimumSize(new java.awt.Dimension(93, 30));
        additionalMetaDataButton.setPreferredSize(new java.awt.Dimension(93, 30));
        additionalMetaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionalMetaDataButtonActionPerformed(evt);
            }
        });

        searchParametersPanel.add(additionalMetaDataButton);

        getContentPane().add(searchParametersPanel, java.awt.BorderLayout.NORTH);

        contextualizePanel.setLayout(new javax.swing.BoxLayout(contextualizePanel, javax.swing.BoxLayout.Y_AXIS));

        jSeparator2.setMaximumSize(new java.awt.Dimension(0, 20));
        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 20));
        contextualizePanel.add(jSeparator2);

        contexPlustButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/MoreContext.gif")));
        contexPlustButton.setText("More context");
        contexPlustButton.setMaximumSize(new java.awt.Dimension(145, 33));
        contexPlustButton.setPreferredSize(new java.awt.Dimension(145, 33));
        contexPlustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contexPlustButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(contexPlustButton);

        contextMinusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/zecke/LessContext.gif")));
        contextMinusButton.setText("Less context");
        contextMinusButton.setMaximumSize(new java.awt.Dimension(145, 33));
        contextMinusButton.setPreferredSize(new java.awt.Dimension(145, 33));
        contextMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextMinusButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(contextMinusButton);

        jSeparator1.setMaximumSize(new java.awt.Dimension(0, 20));
        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 20));
        contextualizePanel.add(jSeparator1);

        showPartiturButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        showPartiturButton.setText("Show partitur");
        showPartiturButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showPartiturButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showPartiturButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPartiturButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(showPartiturButton);

        showSegmentChainButton.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        showSegmentChainButton.setText("Segment Chain");
        showSegmentChainButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showSegmentChainButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showSegmentChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSegmentChainButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(showSegmentChainButton);

        jSeparator3.setMaximumSize(new java.awt.Dimension(0, 20));
        jSeparator3.setPreferredSize(new java.awt.Dimension(0, 20));
        contextualizePanel.add(jSeparator3);

        showMetaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/EditMetaInformation.gif")));
        showMetaButton.setText("Meta information");
        showMetaButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showMetaButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showMetaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMetaButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(showMetaButton);

        showSpeakerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/EditSpeakerTable.gif")));
        showSpeakerButton.setText("Speakertable");
        showSpeakerButton.setMaximumSize(new java.awt.Dimension(145, 33));
        showSpeakerButton.setPreferredSize(new java.awt.Dimension(145, 33));
        showSpeakerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSpeakerButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(showSpeakerButton);

        jSeparator4.setMaximumSize(new java.awt.Dimension(0, 20));
        jSeparator4.setPreferredSize(new java.awt.Dimension(0, 20));
        contextualizePanel.add(jSeparator4);

        saveResultButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exmaralda/partitureditor/partiture/Icons/SaveAs.gif")));
        saveResultButton.setText("Save result");
        saveResultButton.setMaximumSize(new java.awt.Dimension(145, 33));
        saveResultButton.setPreferredSize(new java.awt.Dimension(145, 33));
        saveResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultButtonActionPerformed(evt);
            }
        });

        contextualizePanel.add(saveResultButton);

        jSeparator5.setMaximumSize(new java.awt.Dimension(0, 40));
        jSeparator5.setPreferredSize(new java.awt.Dimension(0, 40));
        contextualizePanel.add(jSeparator5);

        getContentPane().add(contextualizePanel, java.awt.BorderLayout.EAST);

        resultPanel.setLayout(new javax.swing.BoxLayout(resultPanel, javax.swing.BoxLayout.X_AXIS));

        searchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        searchResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        searchResultTable.setMaximumSize(null);
        searchResultTable.setMinimumSize(null);
        searchResultTable.setPreferredSize(null);
        searchResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultTableMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(searchResultTable);

        resultPanel.add(jScrollPane2);

        getContentPane().add(resultPanel, java.awt.BorderLayout.CENTER);

        progressBar.setForeground(new java.awt.Color(0, 204, 0));
        progressBar.setMaximumSize(new java.awt.Dimension(150, 18));
        progressBar.setPreferredSize(new java.awt.Dimension(150, 18));
        progressBar.setStringPainted(true);
        statusPanel.add(progressBar);

        statusLabel.setMaximumSize(new java.awt.Dimension(300, 18));
        statusLabel.setPreferredSize(new java.awt.Dimension(200, 18));
        statusPanel.add(statusLabel);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void additionalMetaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additionalMetaDataButtonActionPerformed
// TODO add your handling code here:
        MetaDataSelectionDialog dialog = new MetaDataSelectionDialog((java.awt.Frame)getTopLevelAncestor(),true,this.getCorpus());
        dialog.setVisible(true);
        this.metaDataKeys = dialog.getMetaDataKeys();
    }//GEN-LAST:event_additionalMetaDataButtonActionPerformed

    private void saveResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultButtonActionPerformed
        saveResult();
    }//GEN-LAST:event_saveResultButtonActionPerformed

    private void showSegmentChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSegmentChainButtonActionPerformed
        showSegmentChain();
    }//GEN-LAST:event_showSegmentChainButtonActionPerformed

    private void searchResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultTableMouseClicked
        if (SwingUtilities.isLeftMouseButton(evt) && evt.getClickCount()==2){
            this.showPartiturButtonActionPerformed(null);
        }        
    }//GEN-LAST:event_searchResultTableMouseClicked

    private void showPartiturButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPartiturButtonActionPerformed
        showPartitur();
    }//GEN-LAST:event_showPartiturButtonActionPerformed

    private void searchExpressionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchExpressionTextFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_searchExpressionTextFieldActionPerformed

    private void contextMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextMinusButtonActionPerformed
        lessContext();
    }//GEN-LAST:event_contextMinusButtonActionPerformed

    private void contexPlustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contexPlustButtonActionPerformed
        moreContext();
    }//GEN-LAST:event_contexPlustButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
// TODO add your handling code here:
        String text = searchExpressionTextField.getText();
        if ((text==null) || (text.length()==0)){
            JOptionPane.showConfirmDialog(this,"Please enter a search expression!");
            return;
        }
        setTitle(getSearchExpression());
        performSearch();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void showSpeakerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSpeakerButtonActionPerformed
// TODO add your handling code here:
        showSpeakerTable();
    }//GEN-LAST:event_showSpeakerButtonActionPerformed

    private void showMetaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMetaButtonActionPerformed
        showMetaInformation();
    }//GEN-LAST:event_showMetaButtonActionPerformed

    private void searchExpressionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchExpressionButtonActionPerformed
        showSearchExpressionInputHelper();
    }//GEN-LAST:event_searchExpressionButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton additionalMetaDataButton;
    javax.swing.JButton contexPlustButton;
    javax.swing.JButton contextMinusButton;
    private javax.swing.JPanel contextualizePanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton saveResultButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchExpressionButton;
    javax.swing.JTextField searchExpressionTextField;
    private javax.swing.JPanel searchParametersPanel;
    javax.swing.JTable searchResultTable;
    private javax.swing.JButton showMetaButton;
    private javax.swing.JButton showPartiturButton;
    javax.swing.JButton showSegmentChainButton;
    private javax.swing.JButton showSpeakerButton;
    javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    public void showMetaInformation(){
        if (this.getSelectedSearchResultItem()==null) return;
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscription st = getSelectedTranscription();
            MetaInformation mi = st.getHead().getMetaInformation();
            EditMetaInformationDialog d = new EditMetaInformationDialog((JFrame)(getTopLevelAncestor()),true,mi);
            d.editMetaInformation();            
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);
        
    }
    
    public void showSpeakerTable(){
        if (this.getSelectedSearchResultItem()==null) return;
        setCursor( WAIT_CURSOR );
        try{
            SegmentedTranscription st = getSelectedTranscription();            
            Speakertable spt = st.getHead().getSpeakertable();
            EditSpeakerTableDialog d = new EditSpeakerTableDialog((JFrame)(getTopLevelAncestor()),true,spt);
            d.editSpeakertable();
        } catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        setCursor( ORDINARY_CURSOR);                
    }
    
    public void showPartitur(){
        if (this.getSelectedSearchResultItem()==null) return;
        ShowPartiturEvent e = new ShowPartiturEvent();
        e.pathToSegmentedTranscription = getPathToSelectedTranscription();
        e.tierID = getSelectedTierID();
        e.tliID = getSelectedTliID();
        fireShowPartitur(e);
    }

    public void showSearchExpressionInputHelper(){
        SearchExpressionInputDialog dialog = new SearchExpressionInputDialog((JFrame)(getTopLevelAncestor()), true);
        dialog.show();
        String searchExpression = dialog.getSearchExpression();
        searchExpressionTextField.setText(searchExpression);        
    }
    
     public void searchProgressChanged(int total, int done, String message) {
        currentProgress = (int)Math.round(100*done/total);
        System.out.println("progress " + currentProgress);
    }
     
    protected void fireShowPartitur(ShowPartiturEvent event) {
         // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
             if (listeners[i]==ShowPartiturListener.class) {
                ((ShowPartiturListener)listeners[i+1]).showPartitur(event);             
            }
         }
    }
     
   
    public abstract void performSearch();
    
    public String[] getMetaDataKeys(){
        return metaDataKeys;
    }
        
    public abstract AbstractSearchResultItem getSelectedSearchResultItem();
    
    public SegmentedTranscription getSelectedTranscription() throws Exception {
        AbstractSearchResultItem asri = getSelectedSearchResultItem(); 
        String filename = asri.transcriptionPath;
        SegmentedTranscriptionSaxReader str = new SegmentedTranscriptionSaxReader();
        SegmentedTranscription st = str.readFromFile(filename); 
        return st;        
    }

    public String getPathToSelectedTranscription(){
        return getSelectedSearchResultItem().transcriptionPath;
    }
    
    public String getSelectedTierID(){
        return getSelectedSearchResultItem().tierID;
    }
    
    public String getSelectedTliID(){
        return getSelectedSearchResultItem().getTliID();
    }
    
    public abstract void moreContext();

    public abstract void lessContext();
    
    public abstract void showSegmentChain();
    
    public abstract AbstractSearchResult getSearchResult();
    
    public void saveResult(){
        SaveSearchResultDialog dialog = new SaveSearchResultDialog((JFrame)(getTopLevelAncestor()), getSearchResult());        
        dialog.saveSearchResult();        
    }

    public void performUnicodeKeyboardAction(UnicodeKeyboardEvent event) {
        if (!isSelected()) return;
        searchExpressionTextField.replaceSelection(event.getText());
        searchExpressionTextField.requestFocus();             
    }

    public void changedUpdate(javax.swing.event.DocumentEvent documentEvent) {
        checkSearchExpression();
    }

    public void insertUpdate(javax.swing.event.DocumentEvent documentEvent) {
        checkSearchExpression();
    }

    public void removeUpdate(javax.swing.event.DocumentEvent documentEvent) {
        checkSearchExpression();
    }
    
    private void checkSearchExpression(){
        String text = searchExpressionTextField.getText();
        if ((text==null) || (text.length()==0)){
            searchExpressionTextField.setToolTipText("Empty expression");
            searchButton.setEnabled(false);
            return;
        }
        try {
            java.util.regex.Pattern.compile(text);
            searchExpressionTextField.setToolTipText("RegEx syntax OK");
            searchButton.setEnabled(true);
        } catch (java.util.regex.PatternSyntaxException pse){
            searchExpressionTextField.setToolTipText(pse.getLocalizedMessage());
            searchButton.setEnabled(false);
        }
    }

    public void searchMessageChanged(String message) {
    }
}