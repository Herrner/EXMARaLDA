/*
 * SwingTest.java
 *
 * Created on 10. Januar 2007, 16:03
 */

package org.exmaralda.exakt.exmaraldaSearch.swing;

import java.awt.event.ActionEvent;
import java.io.*;
import java.util.regex.PatternSyntaxException;
import javax.swing.UnsupportedLookAndFeelException;
import org.jdom.JDOMException;
import java.util.*;
import javax.swing.table.*;
import org.exmaralda.exakt.search.RegularExpressionSearchParameters;
import org.exmaralda.exakt.search.Search;
import org.exmaralda.exakt.search.SearchHistory;
import org.exmaralda.exakt.search.SearchResultList;
import org.exmaralda.exakt.search.swing.KWICTableEvent;
import org.exmaralda.exakt.search.swing.KWICTableListener;
import org.exmaralda.exakt.search.swing.RegularExpressionTextField;
import org.exmaralda.exakt.search.swing.SearchHistoryComboBox;
import org.exmaralda.exakt.search.swing.SearchProgressMonitor;
import org.exmaralda.exakt.exmaraldaSearch.*;

/**
 *
 * @author  thomas
 */
public class SwingTest extends javax.swing.JFrame implements java.awt.event.ActionListener, KWICTableListener {
    
    String CORPUS_FILE = "D:\\Zecke\\DemoKorpus\\Coma_Corpus.xml";
    //String CORPUS_FILE = "S:\\TP-Z2\\DATEN\\K2\\0.5defekt\\K2_COMA_Corpus.xml";
    
    String SEARCH_EXPRESSION = "das";
    String[][] ADDITIONAL_DATA_LOCATORS =
    {
        {"tier-id", "../../@id"},
        {"speaker", "../../@speaker"},
        {"start", "@s"},
    };
    
    String[][] metaArray =
    {
        {"S", "Sex*"},
        {"T", "# sc"},
        {"C", "transcription-convention"}
    };
    
    Vector<String[]> meta = new Vector<String[]>();
    
    COMACorpus cc;
    
    COMAKWICTable table = new COMAKWICTable();
    RegularExpressionTextField textField;
    SearchHistoryComboBox comboBox;
    SearchHistory sh;
    boolean isSearching = false;
    
    /** Creates new form SwingTest */
    public SwingTest() {
        for (String[] s : metaArray){
            meta.addElement(s);
        }
        initComponents();
        textField = new RegularExpressionTextField();
        textField.setPreferredSize(new java.awt.Dimension(200,30));
        textField.setFont(textField.getFont().deriveFont(16f));
        textField.addActionListener(this);
        HashSet hs1 = new HashSet();
        hs1.add("a");
        hs1.add("b");
        HashSet hs2 = new HashSet();
        hs2.add("c");
        hs2.add("d");
        HashSet hs3 = new HashSet();
        hs3.add("e");
        hs3.add("f");
        sh = new SearchHistory();
        sh.addHistory("x", hs1);
        sh.addHistory("y", hs2);
        sh.addHistory("z", hs3);
        comboBox = new SearchHistoryComboBox(sh);
        comboBox.setPreferredSize(new java.awt.Dimension(400,30));
        comboBox.setMaximumSize(new java.awt.Dimension(400,30));
        comboBox.addActionListener(this);
        upperPanel.add(comboBox);
        //this.getContentPane().add(textField,java.awt.BorderLayout.NORTH);
        table.addKWICTableListener(this);
        this.jScrollPane1.setViewportView(table);
        pack();
        doit();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        metaDataButton = new javax.swing.JButton();
        upperPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        metaDataButton.setText("Set Meta-Data...");
        metaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataButtonActionPerformed(evt);
            }
        });

        getContentPane().add(metaDataButton, java.awt.BorderLayout.SOUTH);

        upperPanel.setLayout(new javax.swing.BoxLayout(upperPanel, javax.swing.BoxLayout.X_AXIS));

        getContentPane().add(upperPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void metaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataButtonActionPerformed
// TODO add your handling code here:
        ChooseCOMAAttributesDialog d = new ChooseCOMAAttributesDialog(this, true,
                cc.getSpeakerAttributes(),
                cc.getCommunicationAttributes(),
                cc.getTranscriptionAttributes(),
                meta);
        d.setVisible(true);
        Vector<String[]> v = d.getSelectedAttributes();
        COMASearchResultListTableModel csrltm = table.getWrappedModel();
        meta = v;
        csrltm.setMetaIdentifiers(v);
        //this.formatTable(csrltm);
        for (String[] s : v){
            System.out.println(s[0] + " / " + s[1]);
        }
    }//GEN-LAST:event_metaDataButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SwingTest().setVisible(true);
            }
        });
    }
    
    public void doit(){
        try {
            // READ CORPUS
            cc = new COMACorpus();
            File file = new File(CORPUS_FILE);
            cc.readCorpus(file);
            System.out.println(cc.getNumberOfSearchableSegments() + " searchable segments");
            System.out.println(cc.getNumberOfCorpusComponents() + " transcriptions");
            
            // INIT SEARCH PARAMETERS
            RegularExpressionSearchParameters resp = new RegularExpressionSearchParameters(SEARCH_EXPRESSION, ADDITIONAL_DATA_LOCATORS);
            resp.setContextLimit(100);
            
            // DO SEARCH
            Search search = new Search(cc,resp);
            search.doSearch();
            
            SearchResultList l = search.getSearchResult();
            COMASearchResultListTableModel m = new COMASearchResultListTableModel(l,cc,meta);
            
            table.setWrappedModel(m);
            
            //table.setModel(m);
            //formatTable(m);
            
        } catch (PatternSyntaxException ex) {
            ex.printStackTrace();
        } catch (JDOMException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }
    
    public void actionPerformed(ActionEvent e) {        
        try {
            // INIT SEARCH PARAMETERS
            //String se = textField.getText();
            final String se = ((String[])(comboBox.getSelectedItem()))[0];
            RegularExpressionSearchParameters resp = new RegularExpressionSearchParameters(se, ADDITIONAL_DATA_LOCATORS);
            resp.setContextLimit(100);
            
            // DO SEARCH
            final Search search = new Search(cc,resp);
            SearchProgressMonitor monitor = new SearchProgressMonitor(this, null, "Searching...");
            search.addSearchListener(monitor);
            monitor.setMillisToDecideToPopup(500);
            monitor.setMillisToPopup(500);
            isSearching = true;
            Thread thread = new Thread(){
                public void run(){
                    search.doSearch();
                    isSearching = false;
                }
            };
            thread.start();    
            while (isSearching){}
            SearchResultList l = search.getSearchResult();
            COMASearchResultListTableModel m = new COMASearchResultListTableModel(l,cc,meta);            
            table.setWrappedModel(m);
            HashSet<String> types = l.getTypes();
            for (String s : types){
                System.out.println(s);                        
            }                    
            
            if (sh.addHistory(se,types)){
                comboBox.setModel(new javax.swing.DefaultComboBoxModel(sh));
            }
            
            
            //search.doSearch();
            
            
        } catch (PatternSyntaxException ex) {
            ex.printStackTrace();
        } catch (JDOMException ex) {
            ex.printStackTrace();
        }
    }

    public void processEvent(KWICTableEvent ev) {        
        System.out.println(ev.getSelectedSearchResult().getLeftContextAsString());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton metaDataButton;
    private javax.swing.JPanel upperPanel;
    // End of variables declaration//GEN-END:variables
    
    
}
